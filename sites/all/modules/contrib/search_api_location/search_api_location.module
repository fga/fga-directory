<?php
/**
 * @file
 * Provides location based search functionality to the Search API.
 */

require_once 'search_api_location.elements.inc';

/**
 * Implements hook_views_api().
 */
function search_api_location_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'search_api_location') . '/views',
  );
}

/**
 * Implements hook_search_api_processor_info().
 */
function search_api_location_search_api_processor_info() {

  $callbacks['location'] = array(
    'name' => t('Location based search'),
    'description' => t('Processor for location based search on latlon fields.'),
    'class' => 'SearchApiLocation',
  );

  return $callbacks;
}

/**
 * Implements hook_search_api_data_type_info().
 */
function search_api_location_search_api_data_type_info() {

  return array(
    'location' => array(
      'name' => t('latitude/longitude'),
      'fallback' => 'string',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function search_api_location_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "search_api_page_search_form") {

    $page_id = $form['form']['id']['#value'];
    $page = search_api_page_load($page_id);

    // Get the location field from the index if it exists.
    $sf = _search_api_location_get_locationfield($page->index_id);

    if ($sf) {
      $spatial = _search_api_location_get_location($form['form']['keys_' . $page_id]['#default_value']);

      $form['form']['spatial_' . $page_id] = array(
        '#type' => 'search_api_location_pick',
        '#weight' => -1,
        '#default_value' => array(
          'lat' => isset($spatial['lat']) ? $spatial['lat'] : $page->options['spatial']['lat'],
          'lng' => isset($spatial['lng']) ? $spatial['lng'] : $page->options['spatial']['lng'],
          'radius' => isset($spatial['radius']) ? $spatial['radius'] : $page->options['spatial']['radius'],
          'radius_min' => $page->options['spatial']['radius_min'],
          'radius_max' => $page->options['spatial']['radius_max'],
          'radius_step' => $page->options['spatial']['radius_step'],
          'radius_measure' => $page->options['spatial']['radius_measure'],
        ),
        '#tree' => TRUE,
      );

      $keys = _search_api_location_get_keys($form['form']['keys_' . $page_id]['#default_value']);
      $form['form']['keys_' . $page_id]['#default_value'] = $keys;

      $form['#submit'][] = "search_api_location_search_api_page_search_form_submit";

      // Override the validate function,
      // because we have to be able to insert no key value.
      $form['#validate'] = array("search_api_location_search_api_page_search_form_validate");
    }
  }
  elseif ($form_id == "search_api_page_admin_edit") {

    $page = $form_state['page'];
    $sf = _search_api_location_get_locationfield($page->index_id);

    if ($sf) {
      $form['options']['spatial'] = array(
        '#type' => 'search_api_location_pick',
        '#default_value' => array_merge(array('edit_mode' => TRUE), $page->options['spatial']),
        '#tree' => TRUE,
      );
    }
  }
  elseif ($form_id == "search_api_page_admin_add" && isset($form_state['step_one'])) {

    $sf = _search_api_location_get_locationfield($form_state['step_one']['index_id']);

    // @todo Add global config of location fields instead of empty array.
    $spatial = array();

    if ($sf) {
      $form['spatial'] = array(
        '#type' => 'search_api_location_pick',
        '#default_value' => array(
          'lat' => isset($spatial['lat']) ? $spatial['lat'] : '51.03826129999999',
          'lng' => isset($spatial['lng']) ? $spatial['lng'] : '3.7125661000000036',
          'radius' => isset($spatial['radius']) ? $spatial['radius'] : '5',
          'radius_min' => isset($spatial['radius_min']) ? $spatial['radius_min'] : '5',
          'radius_max' => isset($spatial['radius_max']) ? $spatial['radius_max'] : '100',
          'radius_step' => isset($spatial['radius_step']) ? $spatial['radius_step'] : '5',
          'radius_measure' => isset($spatial['radius_measure']) ? $spatial['radius_measure'] : 'km',
          'edit_mode' => TRUE,
        ),
        '#tree' => TRUE,
      );
    }
  }
}

/**
 * Form validation handler for search_api_page_search_form().
 *
 * @see search_api_location_search_api_page_search_form_submit()
 */
function search_api_location_search_api_page_search_form_validate(array $form, array &$form_state) {
  // @todo Validate the lat, lng and radius value.
}

/**
 * Form submission handler for search_api_page_search_form().
 *
 * @see search_api_location_search_api_page_search_form_validate()
 */
function search_api_location_search_api_page_search_form_submit(array $form, array &$form_state) {

  $page_id = $form_state['values']['id'];
  $spatial = $form_state['values']['spatial_' . $page_id];


  // Append the spatial data after the keys and change the redirect.
  // @todo Add token support and/or work with slashes.
  $form_state['values']['keys_' . $page_id] .= "--location--" . $spatial['lat'] . "_" . $spatial['lng'] . "_" . $spatial['radius'];
  $form_state['redirect'] .= "--location--" . $spatial['lat'] . "_" . $spatial['lng'] . "_" . $spatial['radius'];
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function search_api_location_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface &$query) {

  $spatial = $query->getOption('spatial');

  if (is_array($spatial)) {

    // Recalculate the radius field, because solr can only handle km.
    if ($spatial['radius_measure'] == "m") {
      $spatial['radius'] /= 1000;
    }
    elseif ($spatial['radius_measure'] == "mi") {
      $spatial['radius'] *= 1.609344;
    }

    // $call_args['query'] = '{!geofilt}';
    $call_args['params']['fq'][] = '{!geofilt}';
    $call_args['params']['sfield'] = "locs_" . $spatial['field'];
    $call_args['params']['pt'] = $spatial['lat'] . ',' . $spatial['lng'];
    $call_args['params']['d'] = $spatial['radius'];
    $call_args['params']['sort'] = 'geodist() asc';

    // Change the fq facet ranges to the correct fq.
    foreach ($call_args['params']['fq'] as $key => $value) {

      // If the fq starts with the sfield then replace it with a frange fq.
      $new_field = SearchApiSolrConnection::escapeFieldName("locs_" . $spatial['field']);

      if (strpos($value, $new_field) === 0) {
        $value = explode(" ", $value);
        $value[0] = explode("\"", $value[0]);
        $call_args['params']['fq'][$key] = "{!frange l=" . $value[0][1] . " u=" . $value[3] . "}geodist()";
      }
    }

    // Change the spatial field facet so it return distance facet ranges.
    $facets = $query->getOption('search_api_facets');

    if (is_array($facets)) {
      foreach ($facets as $facet => $info) {
        if ($facet == $spatial['field']) {
          foreach ($call_args['params']['facet.field'] as $key => $value) {
            if ($value == "locs_" . $spatial['field']) {
              unset($call_args['params']['facet.field'][$key]);
            }
          }

          $range = $spatial['radius'] / 5;

          for ($i = 0; $i < 5; $i++) {
            $call_args['params']['facet.query'][] = "{!frange l=" . $i * $range . " u=" . ($i + 1) * $range . "}geodist()";
          }
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_solr_search_results_alter().
 */
function search_api_location_search_api_solr_search_results_alter(&$results, $query, $response) {

  $locationfield = _search_api_location_get_locationfield($query->getIndex()->id);
  $spatial = $query->getOption('spatial');

  if (isset($locationfield) && $spatial) {

    $facets = $response->__get('facet_counts');

    if ($facets) {

      foreach ($facets->facet_queries as $facet_query => $count) {

        // @todo: find better way to extract the facets and rewrite them.
        $parts = explode(' ', $facet_query);
        $lower = explode('=', $parts[1]);
        $upper = round($kort[1]);

        $upper = explode('}', $parts[2]);
        $upper = $upper[0];
        $upper = explode('=', $upper);
        $upper = round($upper[1]);

        // Recalculate the radius field, because solr can only handle km.
        if ($spatial['radius_measure'] == 'm') {
          $lower *= 1000;
          $upper *= 1000;
        }
        elseif ($spatial['radius_measure'] == 'mi') {
          $lower /= 1.609344;
          $upper /= 1.609344;
        }

        // Do some rounding.
        $precision = 2;
        if ($spatial['radius_measure'] == 'm') {
          // Only use full numbers if unit is metres.
          $precision = 0;
        }
        $lower = round($lower, $precision);
        $upper = round($upper, $precision);

        $results['search_api_facets'][$locationfield][] = array("filter" => '"' . $lower . ' ' . $spatial['radius_measure'] . ' to ' . $upper . ' ' . $spatial['radius_measure'] . '"', "count" => $count);
      }
    }
  }
}

/**
 * Returns the locationfield of an Search API index (if it has any)
 *
 * @param integer $index_id
 *   The index_id of an index for which the location field should be found.
 *
 * @return string
 *   a string with the name of the location field
 */
function _search_api_location_get_locationfield($index_id) {

  $index = search_api_index_load($index_id);

  if (isset($index->options['processors']['location']) && $index->options['processors']['location']['status']) {
    foreach ($index->options['processors']['location']['settings']['fields'] as $field => $value) {
      if ($value) {
        return $field;
      }
    }
  }

  return FALSE;
}

/**
 * Returns the location part of the search keys
 *
 * @param string $keys
 *   The keys of the search page.
 *
 * @return array
 *   an array of the location details
 */
function _search_api_location_get_location($keys) {

  $location = array();

  if (is_array($keys)) {
    $parts = explode("--location--", $keys[0]);
  }
  else {
    $parts = explode("--location--", $keys);
  }

  if (isset($parts[1])) {
    $location_data = explode('_', $parts[1]);

    $location['lat'] = $location_data[0];
    $location['lng'] = $location_data[1];
    $location['radius'] = $location_data[2];

    return $location;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the keys part of the search keys
 *
 * @param string $keys
 *   The keys of the search page.
 *
 * @return string
 *   an string with the search keys without the location part.
 */
function _search_api_location_get_keys($keys) {

  if (is_array($keys)) {
    $parts = explode("--location--", $keys[0]);
  }
  else {
    $parts = explode("--location--", $keys);
  }

  return $parts[0];
}
