<?php

/**
 * @file
 * The Node export CSV module.
 *
 * Adds CSV format to Node export.
 */

/**
 * Implements hook_node_export_format_handlers().
 */
function node_export_csv_node_export_format_handlers() {
  return array(
    'csv' => array(
      '#title' => t('CSV'),
      '#module' => 'node_export_csv',
      '#description' => t(
        '<a href="!doc">RFC4180</a> compliant <a href="!csv">CSV</a> code.  Values are comma-seperated, and records are CRLF delimited.',
        array(
          '!doc' => 'http://tools.ietf.org/html/rfc4180',
          '!csv' => 'http://en.wikipedia.org/wiki/Comma-separated_values'
        )
      ),
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function node_export_csv_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_export_import') {
    // Move node_export_csv_node_export_import() to the end of the list.=
    // Node export CSV is slow to fire on imports, so this allows other
    // modules to respond first.
    $group = $implementations['node_export_csv'];
    unset($implementations['node_export_csv']);
    $implementations['node_export_csv'] = $group;
  }
}

/**
 * Implements hook_node_export().
 */
function node_export_csv_node_export($nodes, $format) {
  return node_export_csv_encode($nodes);
}

/**
 * Build CSV string.
 */
function node_export_csv_encode($nodes) {
  $encoded_nodes = array();
  $csv_lines = array();

  $node_keys = array();
  foreach (array_keys($nodes) as $node_key) {
    $new_node_key = 'node_' . $node_key;
    $node_keys[] = $new_node_key;
    node_export_csv_encode_node($encoded_nodes, $new_node_key, $nodes[$node_key]);
  }

  $csv_lines['node_export_csv_header'] = array_keys($encoded_nodes);

  foreach (array_keys($encoded_nodes) as $header_value) {
    $encoded_nodes[$header_value] = array_merge(array_fill_keys($node_keys, NULL), $encoded_nodes[$header_value]);
    foreach (array_keys($encoded_nodes[$header_value]) as $encoded_node_key) {
      $csv_lines[$encoded_node_key][$header_value] = $encoded_nodes[$header_value][$encoded_node_key];
    }
  }

  return node_export_csv_array_to_csv($csv_lines);
}

/**
 * Process a node and update $header and $encoded_nodes accordingly.
 */
function node_export_csv_encode_node(&$encoded_nodes, $node_key, $var, $parent = NULL) {

  foreach ($var as $k => &$v) {

    // Get the new header value.
    $header_value = node_export_csv_encode_header_value($parent, $var, $k);

    if (is_object($v) || is_array($v)) {
      // Recurse through the structure.
      node_export_csv_encode_node($encoded_nodes, $node_key, $v, $header_value);
    }
    else {
      // Create a safe text version of this value and store it against the header using a safe key.
      $encoded_nodes[$header_value][$node_key] = node_export_csv_encode_sanitize_value($v);
    }
  }
}

/**
 * Encode a value.
 */
function node_export_csv_encode_sanitize_value($var) {
    if (is_numeric($var)) {
      return $var;
    }
    elseif (is_bool($var)) {
      return ($var ? 'TRUE' : 'FALSE');
    }
    elseif (is_null($var)) {
      return 'NULL';
    }
    elseif (is_string($var)) {
      // Single-quote strings that could be confused for null or boolean.
      if (in_array(strtoupper($var), array('TRUE', 'FALSE', 'NULL'))) {
        $var = "'" . $var . "'";
      }

      return $var;
    }
    else {
      return '';
    }
}

/**
 * Decode a value.
 */
function node_export_csv_decode_sanitize_value($var) {
  // Allow numeric, bool, and null values to pass right back as is.
  if (is_numeric($var) || is_bool($var) || is_null($var)) {
    return $var;
  }
  // Allow the special case strings back as is.
  elseif (in_array(strtoupper($var), array("'TRUE'", "'FALSE'", "'NULL'"))) {
    return $var;
  }
  // Assume this is a string.
  return "'" . $var . "'";
}

/**
 * Create header value from $parents, $var, and $k.
 */
function node_export_csv_encode_header_value($parents, $var, $k) {
  if (is_null($parents)) {
    // Special case; on the first level do not prefix the key.
    $header_value = $k;
  }
  elseif (is_object($var)) {
    $header_value = $parents . "->" . $k;
  }
  elseif (is_array($var)) {
    $header_value = $parents . "['" . $k . "']";
  }
  return $header_value;
}

/**
 * Insert $new after $before in $array if not exists, and return the position.
 *
 * Deprecated?
 */
function node_export_csv_encode_array_insert_after(&$array, $new, $before) {
  $position = array_search($new, $array);
  if ($position === FALSE) {
    $position = array_search($before, $array) + 1;
    if ($position >= count($array)) {
      // Just append.
      $array[] = $new;
    }
    else {
      // Insert.
      node_export_csv_encode_array_insert_at($array, $new, $position);
    }
  }
  return $position;
}

/**
 * Insert $new at $position in $array.
 *
 * Deprecated?
 */
function node_export_csv_encode_array_insert_at(&$array, $new, $position) {
  $prefix = array_slice($array, 0, $position);
  $suffix = array_slice($array, $position);
  $array = array_merge($prefix, array($new), $suffix);
}

/**
 * Implements hook_node_export_import().
 *
 * @see hook_node_export_import()
 */
function node_export_csv_node_export_import($code_string) {

  // Get array data from CSV.
  $array = @node_export_csv_csv_to_array($code_string);

  // If the first two rows are of equal length, we can assume this is a CSV.
  // Also checks there are a decent number of fields.
  if (count($array[0]) > 10 && count($array[0]) == count($array[1])) {
    $nodes = array();

    // Assume row 0 is the header, and the rest of the rows are the nodes.
    $header = array_shift($array);

    // Build the nodes.
    foreach ($array as &$row) {
      $node = (object)array();
      foreach ($row as $key => $item) {
        $item = node_export_csv_decode_sanitize_value($item);
        eval('$node->' . $header[$key] . ' = ' . $item . ';');
      }
      $nodes[] = $node;
    }

    return $nodes;
  }
}

/**
 *  Encode RFC4180 compliant CSV.
 */
function node_export_csv_array_to_csv($array, $seperator = ',', $enclosure = '"', $eol = "\r\n") {
  $lines = array();
  foreach ($array as $line) {
    $out_item = array();
    foreach ($line as $item) {
      if (stripos($item, $enclosure) !== FALSE) {
        $item = str_replace($enclosure, $enclosure . $enclosure, $item);
      }
      if (
        (stripos($item, $seperator) !== FALSE)
        || (stripos($item, $enclosure) !== FALSE)
        || (stripos($item, $eol) !== FALSE)
      ) {
        $item = $enclosure . $item . $enclosure;
      }
      $out_item[] = $item;
    }
    $lines[] = implode($seperator, $out_item);
  }
  return implode($eol, $lines);
}

/**
 *  Decode RFC4180 compliant CSV.
 */
function node_export_csv_csv_to_array($string, $seperator = ',', $enclosure = '"', $eol = "\r\n") {
  $lines = array();
  $out_item = array();
  $count = strlen($string);
  $escape = FALSE;
  $double_escape = FALSE;
  $position = 0;
  $i = 0;
  $eols = str_split($eol);

  while ($i < $count) {
    $c = $string[$i];

    // Determine whether this is an EOL.
    $is_eol = TRUE;
    for ($j = 0; $j < count($eols); $j++) {
      if (!isset($string[$i + $j]) || $string[$i + $j] != $eols[$j]) {
        $is_eol = FALSE;
        break;
      }
    }

    if ($is_eol) {
      if ($escape) {
        $out_item[$position] .= $c;
      }
      else {
        $i += count($eols);
        $lines[] = $out_item;
        $out_item = array();
        $position = 0;
        continue;
      }
    }
    elseif ($c == $seperator) {
      if ($escape) {
        $out_item[$position] .= $c;
      }
      else {
        $position++;
        $escape = FALSE;
        $double_escape = FALSE;
      }
    }
    elseif ($c == $enclosure) {
      if ($double_escape) {
        $out_item[$position] .= $enclosure;
        $double_escape = FALSE;
      }
      if ($escape) {
        $escape = FALSE;
        $double_escape = TRUE;
      }
      else {
        $escape = TRUE;
        $double_escape = FALSE;
      }
    }
    else {
      if ($double_escape) {
        $out_item[$position] .= $enclosure;
        $double_escape = FALSE;
      }
      $out_item[$position] .= $c;
    }
    $i++;
  }
  if (!empty($out_item)) {
    $lines[] = $out_item;
  }
  return $lines;
}
