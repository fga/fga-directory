<?php

/**
 * @file
 * RESTful web services tests.
 */

class RestWSTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'RESTful web services tests',
      'description' => 'Tests CRUD operations via the REST web service.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('restws');
  }

  /**
   * CRUD tests for nodes.
   */
  function testCRUD() {
    // Test Read.
    $title = $this->randomName(8);
    $node = $this->drupalCreateNode(array('title' => $title));
    $account = $this->drupalCreateUser(array('access resource node'));
    $this->drupalLogin($account);
    $result = $this->httpRequest('node/' . $node->nid . '.json', 'GET', $account);
    $node_array = drupal_json_decode($result);
    $this->assertEqual($node->title, $node_array['title'], 'Node title was received correctly.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');

    // Test Create.
    $account = $this->drupalCreateUser(array('access content', 'bypass node access', 'access resource node'));
    $title = $this->randomName(8);
    $new_node = array(
      'body'      => array(LANGUAGE_NONE => array(array())),
      'title'     => $title,
      'comment'   => 2,
      'promote'   => 0,
      'revision'  => 1,
      'log'       => '',
      'status'    => 1,
      'sticky'    => 0,
      'type'      => 'page',
      'language'  => LANGUAGE_NONE,
      'author'    => $account->uid,
    );
    $json = drupal_json_encode($new_node);
    $result = $this->httpRequest('node', 'PUT', $account, $json);
    $result_array = drupal_json_decode($result);
    $nid = $result_array['id'];
    $node = node_load($nid);
    $this->assertEqual($title, $node->title, 'Node title in DB is equal to the new title.');
    $this->assertResponse('201', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');

    // Test Update.
    $new_title = $this->randomName(8);
    $json = drupal_json_encode(array('title' => $new_title));
    $this->httpRequest('node/' . $node->nid, 'POST', $account, $json);
    // Clear the static cache, otherwise we won't see the update.
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertEqual($new_title, $node->title, 'Node title in DB is equal to the updated title.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');

    // Test delete.
    $this->httpRequest('node/' . $node->nid, 'DELETE', $account);
    // Clear the static cache, otherwise we won't see the update.
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertFalse($node, 'Node is not in the DB anymore.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');
  }

  /**
   * Tests using the xml formatter.
   */
  function testXmlFormatter() {
    // Test Read.
    $account = $this->drupalCreateUser(array('access content', 'bypass node access', 'access resource node'));
    $this->drupalLogin($account);
    $title = $this->randomName(8);
    $node = $this->drupalCreateNode(array('title' => $title));

    $result = $this->drupalGet("node/$node->nid", array(), array('Accept: application/xml'));
    $this->assertRaw("<title>$title</title>", 'XML has been generated.');

    // Test update.
    $new_title = 'foo';
    $result = $this->httpRequest('node/' . $node->nid, 'POST', $account, "<node><title>$new_title</title></node>", 'xml');
    // Clear the static cache, otherwise we won't see the update.
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertEqual($new_title, $node->title, 'Node title in DB is equal to the updated title.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/xml', 'HTTP content type is correct.');
  }

  /**
   * Test requests to non-existing resources and other errors.
   */
  function testErrors() {
    // Read non-existing resource.
    $random_nid = rand(1, 1000);
    $result = $this->httpRequest('node/' . $random_nid, 'GET');
    $this->assertResponse('404', 'HTTP response code is correct.');

    // Update a node with an unknown property.
    $account = $this->drupalCreateUser(array('access content', 'bypass node access', 'access resource node'));
    $node = $this->drupalCreateNode();
    $property_name = $this->randomName(8);
    $json = drupal_json_encode(array($property_name => $property_name));
    $result = $this->httpRequest('node/' . $node->nid, 'POST', $account, $json);
    $this->assertEqual($result, "406 Not Acceptable: Unknown data property $property_name.", 'Response body is correct');
    $this->assertResponse('406', 'HTTP response code is correct.');

    // Create a node with an unknown property.
    $title = $this->randomName(8);
    $new_node = array(
      'body'      => array(LANGUAGE_NONE => array(array())),
      'title'     => $this->randomName(8),
      'comment'   => 2,
      'promote'   => 0,
      'revision'  => 1,
      'log'       => '',
      'status'    => 1,
      'sticky'    => 0,
      'type'      => 'page',
      'language'  => LANGUAGE_NONE,
      'author'    => $account->uid,
      $property_name => $property_name,
    );
    $json = drupal_json_encode($new_node);
    $result = $this->httpRequest('node', 'PUT', $account, $json);
    $this->assertEqual($result, "406 Not Acceptable: Unknown data properties: $property_name.", 'Response body is correct');
    $this->assertResponse('406', 'HTTP response code is correct.');
  }

  /**
   * Test that sensitive user data is hidden for the "access user profiles"
   * permission.
   */
  function testUserPermissions() {
    // Test other user with "acces user profiles" permission.
    $test_user = $this->drupalCreateUser();
    $account = $this->drupalCreateUser(array('access resource user', 'access user profiles'));
    $result = $this->httpRequest('user/' . $test_user->uid . '.json', 'GET', $account);
    $user_array = drupal_json_decode($result);
    $this->assertEqual($test_user->name, $user_array['name'], 'User name was received correctly.');
    $this->assertFalse(isset($user_array['mail']), 'User mail is not present in the response.');
    $this->assertFalse(isset($user_array['roles']), 'User roles are not present in the response.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');

    // Test the own user - access to sensitive information should be allowed.
    $result = $this->httpRequest('user/' . $account->uid . '.json', 'GET', $account);
    $user_array = drupal_json_decode($result);
    $this->assertEqual($account->name, $user_array['name'], 'User name was received correctly.');
    $this->assertEqual($account->mail, $user_array['mail'], 'User mail is present in the response.');
    $role_keys = array_keys($account->roles);
    $this->assertEqual(sort($role_keys), sort($user_array['roles']), 'User roles are present in the response.');
    $this->assertResponse('200', 'HTTP response code is correct.');
    $this->assertEqual(curl_getinfo($this->curlHandle, CURLINFO_CONTENT_TYPE), 'application/json', 'HTTP content type is correct.');
  }

  /**
   * Helper function to issue a HTTP request with simpletest's cURL.
   */
  protected function httpRequest($url, $method, $account = NULL, $body = NULL, $format = 'json') {
    if (isset($account)) {
      unset($this->curlHandle);
      $this->drupalLogin($account);
    }
    switch ($method) {
      case 'GET':
        return $this->curlExec(array(
          CURLOPT_HTTPGET => TRUE,
          CURLOPT_URL => url($url, array('absolute' => TRUE)),
          CURLOPT_NOBODY => FALSE)
        );
      case 'PUT':
        return $this->curlExec(array(
          CURLOPT_HTTPGET => FALSE,
          CURLOPT_CUSTOMREQUEST => 'PUT',
          CURLOPT_POSTFIELDS => $body,
          CURLOPT_URL => url($url, array('absolute' => TRUE)),
          CURLOPT_NOBODY => FALSE,
          CURLOPT_HTTPHEADER => array('Content-Type: application/' . $format),
        ));
      case 'POST':
        return $this->curlExec(array(
          CURLOPT_HTTPGET => FALSE,
          CURLOPT_POST => TRUE,
          CURLOPT_POSTFIELDS => $body,
          CURLOPT_URL => url($url, array('absolute' => TRUE)),
          CURLOPT_NOBODY => FALSE,
          CURLOPT_HTTPHEADER => array('Content-Type: application/' . $format),
        ));
      case 'DELETE':
        return $this->curlExec(array(
          CURLOPT_HTTPGET => FALSE,
          CURLOPT_CUSTOMREQUEST => 'DELETE',
          CURLOPT_URL => url($url, array('absolute' => TRUE)),
          CURLOPT_NOBODY => FALSE,
        ));
    }
  }
}
