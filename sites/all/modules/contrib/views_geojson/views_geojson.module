<?php

/**
 * @file
 * Provide a GeoJSON Views feed style.
 */

/**
 * Implements hook_views_api().
 */
function views_geojson_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'views_geojson') . '/views',
  );
}

/**
 * We almost duplicate the content_handler_field_multiple::render function
 * to get the multiple rendered field values in an array
 * @param $field
 * @param $values
 * @return unknown_type
 */
function _views_geojson_render_multiple_field($field, $values) {
    $options = $field->options;
    // If this is not a grouped field, use content_handler_field::render().
    if (!$field->defer_query) {
      return $field->render($values);
    }
    // We're down to a single node here, so we can retrieve the actual field
    // definition for the node type being considered.
    $content_field = content_fields($field->content_field['field_name'], $values->{$field->aliases['type']});
    $vid = $values->{$field->field_alias};
    if (isset($field->field_values[$vid])) {
      // Gather items, respecting the 'Display n values starting from m' settings.
      $count_skipped = 0;
      $items = array();
      foreach ($field->field_values[$vid] as $item) {
        if (empty($options['multiple']['multiple_from']) || ($count_skipped >= $options['multiple']['multiple_from'])) {
          if (empty($options['multiple']['multiple_number']) || (count($items) < $options['multiple']['multiple_number'])) {
            // Grab the nid - needed for render_link().
            $nid = $item['_nid'];
            unset($item['_nid']);
            $items[] = $item;
          }
          else {
            break;
          }
        }
        $count_skipped++;
      }

      // Build a pseudo-node from the retrieved values.
      $node = drupal_clone($values);
      // content_format and formatters will need a 'type'.
      $node->type = $values->{$field->aliases['type']};
      $node->nid = $values->{$field->aliases['nid']};
      $node->vid = $values->{$field->aliases['vid']};

      // Some formatters need to behave differently depending on the build_mode
      // (for instance: preview), so we provide one.
      $node->build_mode = NODE_BUILD_NORMAL;

      // Render items.
      $formatter_name = $options['format'];
      if ($items && ($formatter = _content_get_formatter($formatter_name, $content_field['type']))) {
        $rendered = array();
        if (content_handle('formatter', 'multiple values', $formatter) == CONTENT_HANDLE_CORE) {
          // Single-value formatter.
          $n = 0;
          foreach ($items as $item) {
            $output = content_format($content_field, $item, $formatter_name, $node);
            if (!empty($output)) {
              $rendered[++$n] = $field->render_link($output, (object) array('nid' => $nid));
            }
          }
        }
        else {
          // Multiple values formatter.
          $output = content_format($content_field, $items, $formatter_name, $values);
          if (!empty($output)) {
            $rendered[++$n] = $field->render_link($output, (object) array('nid' => $nid));
          }
        }
        if (count($rendered) > 1) {
          // TODO: could we use generic field display ?
          //return theme('content_view_multiple_field', $rendered, $content_field, $values);
          return $rendered;
        }
        elseif ($rendered) {
          return $rendered[1];
        }
      }
    }

    return '';
}

/**
 * Takes each field from a row object and renders the field as determined by the field's theme.
 *
 * @param $view
 *    View the row belongs to
 * @param $row
 *   Row object
 * @return array
 *   Object containing all the raw and rendered fields
 */
function _views_geojson_render_fields($view, $row, $index) {
  $excluded_fields = array();
  $feature         = array('type' => 'Geometry');
  $data_source     = $view->style_plugin->options['data_source'];
  $field_ids       = array_keys($view->field);

  switch ($data_source['value']) {
    case 'latlon':
      $options   = array('latitude', 'longitude');
      $latitude = NULL;
      $longitude = NULL;

      foreach ($view->field as $field_idx => $field) {
        foreach ($options as $option) {
          if ($data_source[$option] == $field_idx) {
            $$option           = $field->advanced_render($row);
            $excluded_fields[] = $field_idx;
          }
        }
      }

      if (!empty($latitude) && !empty($longitude)) {
        $feature['geometry'] =
            array(
              'type'        => 'Point',
              'coordinates' => array(floatval($longitude), floatval($latitude)));
      }
      break;
    case 'boundingbox':
      list($top_field, $right_field,
          $left_field, $bottom_field) = $this_->get_bounds($fields, $data_source);
      $top    = floatval($row->$top_field);
      $right  = floatval($row->$right_field);
      $left   = floatval($row->$left_field);
      $bottom = floatval($row->$bottom_field);
      if (!empty($top) && !empty($left)) {
        $feature['geometry'] =
            array(
              'type'        => 'Polygon',
              'coordinates' => array(
                array($left, $top),
                array($right, $top),
                array($right, $bottom),
                array($left, $bottom))
            );
      }
      array_push($excluded_fields, $top_field, $right_field,
        $left_field, $bottom_field);
      break;
    case 'geofield':
      $options = array('geofield');

      foreach ($view->field as $field_idx => $field) {
        foreach ($options as $option) {
          if ($data_source[$option] == $field_idx) {
            $$option = $view->style_plugin->get_field_value($view->row_index, $field_idx);
            $$option = ${$option}[0]['wkt'];
            $view->row_index = $index;
            $excluded_fields[] = $field_idx;
          }
        }
      }
      if (!empty($geofield)) {
        _views_geojson_load_geophp();
        $json = geoPHP::load($geofield, 'wkt');
        if (is_object($json)) {
          $feature['geometry'] = json_decode($json->out('json'));
        }
      }
      break;
    case 'wkt':
      $options = array('wkt');

      foreach ($view->field as $field_idx => $field) {
        foreach ($options as $option) {
          if ($data_source[$option] == $field_idx) {
            $$option = $field->advanced_render($row);
            $excluded_fields[] = $field_idx;
          }
        }
      }

      if (!empty($wkt)) {
        _views_geojson_load_geophp();
        $json = geoPHP::load($wkt, 'wkt');
        if (is_object($json)) {
          $feature['geometry'] = json_decode($json->out('json'));
        }
      }
      break;
  }

  // Only add features with geometry data
  if (empty($feature['geometry'])) {
    return;
  }

  // Add the name and description attributes
  // as choosen through interface
  if ($data_source['name_field']) {
    $options    = array('name_field');
    $name_field = NULL;

    foreach ($view->field as $field_idx => $field) {
      foreach ($options as $option) {
        if ($data_source[$option] == $field_idx) {
          $$option           = $field->advanced_render($row);
          $excluded_fields[] = $field_idx;
        }
      }
    }
    $feature['properties']['name'] = $name_field;
  }
  else {
    $feature['properties']['name'] = '';
  }

  if ($data_source['description_field']) {
    $options           = array('description_field');
    $description_field = NULL;

    foreach ($view->field as $field_idx => $field) {
      foreach ($options as $option) {
        if ($data_source[$option] == $field_idx) {
          $$option           = $field->advanced_render($row);
          $excluded_fields[] = $field_idx;
        }
        if ($data_source[$option] === '#node') {
          $view_mode = $data_source['view_mode'] ? $data_source['view_mode'] : 'full';
          $$option   = drupal_render(node_view(node_load($row->nid), $view_mode));
        }
      }
    }
    $feature['properties']['description'] = $description_field;
  }
  else {
    $feature['properties']['description'] = '';
  }

  // Fill in attributes that are not:
  // - Coordinate/bounding box fields
  // - Name/description (already processed)
  // - Views "excluded" fields
  foreach ($field_ids as $id) {
    $field = $view->field[$id];
    if (!in_array($id, $excluded_fields, TRUE)) {
      $value                                              = $row->{$view->field[$id]->field_alias};
      $value_rendered                                     = $field->advanced_render($row);
      $feature['properties'][$id]                         = is_numeric($value) ? floatval($value) : $value;
      $feature['properties'][$id . "_rendered"] = is_numeric($value_rendered) ? floatval($value_rendered) : $value_rendered;
    }
  }

  return $feature;
}

/**
 * Render a view's output as JSON.
 *
 * The function will directly output a JSON string instead of returning it.
 *
 * @param $items
 *   The collection of items to encode into JSON.
 * @param $options
 *   Render options.
 */

/**
 * Encodes GeoJSON in a pretty-printed fashion.
 */
function _views_geojson_encode_formatted($v, $depth = 0) {
  $base_indent  = '&nbsp;&nbsp;';
  $eol          = '<br />';
  $indent       = str_repeat($base_indent, $depth);

  // This is based on the drupal_to_js() function.
  switch (gettype($v)) {
    case 'boolean':
      // Lowercase is necessary!
      return $v ? 'true' : 'false';

    case 'integer':
    case 'double':
      return $v;

    case 'resource':
    case 'string':
      $search   = array('"', chr(92), chr(8), chr(12), chr(13) . chr(10), chr(10), chr(13), chr(9));
      $replace  = array('\"', '\\', '\b', '\f', '\n', '\n', '\r', '\t');
      $output   = str_replace($search, $replace, $v);
/* *
      $output = str_replace(array("\r", "\n", "<", ">", "&"),
                           array('\r', '\n', '\x3c', '\x3e', '\x26'),
                           addslashes($output));
/* */
      return '"' . check_plain($output) . '"';

    case 'array':
      // Arrays in JSON can't be associative.  If the array is empty or if it
      // has sequential whole number keys starting with 0, it's not associative
      // so we can go ahead and convert it as an array.
      if (empty($v) || array_keys($v) === range(0, sizeof($v) - 1)) {
        $output = array();
        foreach ($v as $val) {
          $output[] = $indent . $base_indent . _views_geojson_encode_formatted($val, $depth + 1);
        }
        return '[' . (!empty($output) ? $eol . implode(',' . $eol, $output) . $eol . $indent : '') . ']';
      }
      // Otherwise, fall through to convert the array as an object.

    case 'object':
      $output = array();
      foreach ($v as $key => $val) {
        $output[] = $indent . $base_indent . _views_geojson_encode_formatted(strval($key)) . ' : ' . _views_geojson_encode_formatted($val, $depth + 1);
      }
      return '{' . (!empty($output) ? $eol . implode(',' . $eol, $output) . $eol . $indent : '') . '}';

    default:
      return 'null';
  }
}

/**
 * Loads the geoPHP library.
 *
 * @return
 *   Returns the filename of the included geoPHP library when successful, FALSE
 *   otherwise.
 */
function _views_geojson_load_geophp() {
  static $static_cache = FALSE;

  if (!$static_cache) {
    $path = libraries_get_path('geoPHP');
    $file = $path . '/geoPHP.inc';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }

  return $static_cache;
}

/**
 * Implements hook_requirements().
 */
function views_geojson_requirements($phase) {
  $requirements = array();

  $geophp = _views_geojson_load_geophp();

  $geophp_download_link = l('https://github.com/downloads/phayes/geoPHP/geoPHP.tar.gz', 'https://github.com/downloads/phayes/geoPHP/geoPHP.tar.gz');

  // Report geoPHP library status
  if ($geophp) {
    try {
      $geophp_version = geoPHP::version();
    }
    catch (Exception $e) {
      $geophp_version = 0;
    }
    if ($geophp_version >= 0.4) {
      $requirements['views_geojson_geophp'] = array(
        'title' => t('GeoPHP library installed (Views GeoJSON)'),
        'severity' => REQUIREMENT_OK,
        'value' => t('GeoPHP library (version %version) installed at %path.', array('%path' => $geophp, '%version' => $geophp_version)),
      );
    }
    elseif ($geophp_version >= 0.3) {
      $requirements['views_geojson_geophp'] = array(
        'title' => t('Old geoPHP library (Views GeoJSON)'),
        'severity' => REQUIREMENT_INFO,
        'value' => t('GeoPHP library (version %version) found. Version %version is compatible with Views GeoJSON, but is not current and might lead to problems. Please download the newest version of geoPHP from !link and unpack it into your libraries directory.', array('!link' => $geophp_download_link, '%version' => $geophp_version)),
      );
    }
    else {
      $requirements['views_geojson_geophp'] = array(
        'title' => t('Incompatible geoPHP library (Views GeoJSON)'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('GeoPHP library version %version is outdated and incompatible with Views GeoJSON. Please download the latest geoPHP from !link and unpack it into your libraries directory.', array('!link' => $geophp_download_link, '%version' => $geophp_version)),
      );
    }
  }
  else {
    $requirements['views_geojson_geophp'] = array(
      'title' => t('GeoPHP library not found (Views GeoJSON)'),
      'severity' => REQUIREMENT_ERROR,
      'value' => t('GeoPHP library not found. Views GeoJSON requires it. Please download it from !link and unpack it into your libraries directory.', array('!link' => $geophp_download_link)),
    );
  }
  return $requirements;
}
