<?php
/**
 * @file
 * Code for the Occupations feature.
 */

include_once('occupations.features.inc');


function occupations_node_view($node) {
  //dpr($node);
}

/**
 * Implements hook_rdf_namespaces().
 */
function occupations_rdf_namespaces() {
  return array(
    'ows'    => 'http://vocab.occupy.net/ows#',
    'schema' => 'http://schema.org/',
  );
}

/*******************************************************************************
 * Computed Field Functions
 *
 * Used for computing comment counts for various comment states.
 ******************************************************************************/

/**
 * Implements hook_comment_insert().
 */
function occupations_comment_insert($comment) {
  // Save node so that comment-based computed fields update.
  $node = node_load($comment->nid);
  node_save($node);
}

/**
 * Implements hook_comment_update().
 */
function occupations_comment_update($comment) {
  // Save node so that comment-based computed fields update.
  $node = node_load($comment->nid);
  node_save($node);
}

/**
 * Implements hook_comment_delete().
 */
function occupations_comment_delete($comment) {
  // Save node so that comment-based computed fields update.
  $node = node_load($comment->nid);
  if ($node->nid) {
    node_save($node);
  }
}

/**
 * Calculate field_comments_new field.
 */
function computed_field_field_comments_new_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment')
    ->propertyCondition('status', 1)
    ->propertyCondition('nid', $entity->nid)
    ->fieldCondition('field_comment_state', 'value', 'new');
  $entity_field[0]['value'] = $query->count()->execute();
}

/**
 * Calculate field_comments_willdo field.
 */
function computed_field_field_comments_willdo_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment')
    ->propertyCondition('status', 1)
    ->propertyCondition('nid', $entity->nid)
    ->fieldCondition('field_comment_state', 'value', 'willdo');
  $entity_field[0]['value'] = $query->count()->execute();
}

/**
 * Calculate field_comments_rejected field.
 */
function computed_field_field_comments_rejected_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment')
    ->propertyCondition('status', 1)
    ->propertyCondition('nid', $entity->nid)
    ->fieldCondition('field_comment_state', 'value', 'rejected');
  $entity_field[0]['value'] = $query->count()->execute();
}

/**
 * Calculate field_comments_done field.
 */
function computed_field_field_comments_done_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment')
    ->propertyCondition('status', 1)
    ->propertyCondition('nid', $entity->nid)
    ->fieldCondition('field_comment_state', 'value', 'done');
  $entity_field[0]['value'] = $query->count()->execute();
}


function occupations_page_alter(&$vars) {
  //dpm($page);
}

/**
 * Implementation of hook_menu_alter()
 */
function tabname_tweaker_menu_alter(&$items) {
  // $items['node/%node/view']['title callback'] = 'tabname_tweaker_title_callback';
  // $items['node/%node/view']['title arguments'] = array(1);

  $items['node/%node/edit']['title'] = t('HJKHKJHKJHKJH');
}






//function occupations_entity_view_alter(&$build, $type) {}
function occupations_node_view_alter(&$build) {
  dsm($node);
  //
}
function occupations_form_alter(&$form, &$form_state, $form_id) {
  //dsm($form_id);  // print form ID to messages
  //dsm($form);     // pretty print array using Krumo to messages

  // switch ($form_id)  {
  //   case 'occupations_node_form':
  //     // auto_nodetitle has problems with special characters, so we hide the title on create,
  //     // but open it up on edit with some help text.
  //     if(empty($form['title']['#default_value'])) {
  //       $form['title']['#type'] = 'hidden';
  //     }
  //     if(!empty($form['title']['#default_value'])) {
  //       $form['title']['#description'] = t('The title is constructed automagically. You can <em>override</em> the result here if need be.');
  //     }
  //     break;
  // }

}

